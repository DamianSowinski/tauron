@use 'variables' as *;

@mixin outline($color: white) {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 2px $color;
  }
}

@mixin icoStroke($color: white, $width: 3) {
  fill: none;
  stroke: $color;
  stroke-width: $width;
  stroke-linecap: round;
  stroke-linejoin: round;
}

@mixin btnIco($color: transparent, $padding: 4px) {
  @include outline;
  padding: $padding;
  width: 42px;
  height: 42px;
  border: unset;
  border-radius: 8px;
  background-color: $color;
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0.6;
  transition: opacity 250ms ease-in-out;
  cursor: pointer;
  svg {
    width: 100%;
    height: 100%;
  }
  &:hover {
    opacity: 1;
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin font-face($name, $fileName, $weight: normal, $style: normal) {
  @font-face {
    font-family: $name;
    font-display: swap;
    font-weight: $weight;
    font-style: $style;
    unicode-range: U+000-5FF;

    src: local('Source Sans Pro'),
    url(#{$fontPath}#{$fileName}.woff2) format('woff2'),
    url(#{$fontPath}#{$fileName}.woff) format('woff');
  }
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);
  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin fluid-ico($min-width: 420px, $max-width: 1400px, $min-size: 16px, $max-size: 24px) {
  $u1: unit($min-width);
  $u2: unit($max-width);
  $u3: unit($min-size);
  $u4: unit($max-size);
  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      width: $min-size;
      height: $min-size;
      @media screen and (min-width: $min-width) {
        width: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)}));
        height: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)}));
      }
      @media screen and (min-width: $max-width) {
        width: $max-size;
        height: $max-size;
      }
    }
  }
}

@mixin fluid-min-height($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);
  $lineHeight: 1.5;
  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      min-height: $min-font-size * $lineHeight;
      @media screen and (min-width: $min-vw) {
        min-height: calc((#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})) * #{$lineHeight});
      }
      @media screen and (min-width: $max-vw) {
        min-height: $max-font-size * $lineHeight;
      }
    }
  }
}

@mixin fluid-txt($min-width: 420px, $max-width: 1400px, $min-font: 16px, $max-font: 22px) {
  letter-spacing: 0.2px;
  line-height: 1.5;
  @include fluid-type($min-width, $max-width, $min-font, $max-font);
}


@mixin breakpoint-up($size) {
  @if map-has-key($breakpoints, $size) {
    $value: map-get($breakpoints, $size);
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @warn 'Unknown `#{$size}` in $breakpoints.';
  }
}

@mixin breakpoint-down($size) {
  @if map-has-key($breakpoints-down, $size) {
    $value: map-get($breakpoints-down, $size);
    @media (max-width: $value) {
      @content;
    }
  } @else {
    @warn 'Unknown `#{$size}` in $breakpoints-down.';
  }
}

@mixin breakpoint($size) {
  @if (map-has-key($breakpoints, $size) and map-has-key($breakpoints-down, $size)) {
    $value1: map-get($breakpoints, $size);
    $value2: map-get($breakpoints-down, $size);
    @if $size == xs {
      @media (max-width: $value2) {
        @content;
      }
    } @else if $size == xl {
      @media (min-width: $value1) {
        @content;
      }
    } @else {
      @media (min-width: $value1) and (max-width: $value2) {
        @content;
      }
    }
  }
}
