@use 'variables' as *;

@mixin outline($color: $white) {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 2px $color;
  }
}

@mixin icoStroke($color: $white, $width: 3) {
  fill: none;
  stroke: $color;
  stroke-width: $width;
  stroke-linecap: round;
  stroke-linejoin: round;
}

@mixin btnIco($color: transparent, $padding: 4px) {
  @include outline;
  padding: $padding;
  width: 42px;
  height: 42px;
  border: unset;
  border-radius: 8px;
  background-color: $color;
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0.6;
  transition: opacity 250ms ease-in-out;
  cursor: pointer;
  svg {
    width: 100%;
    height: 100%;
  }
  &:hover {
    opacity: 1;
  }
}

@mixin breakpoint-up($size) {
  @if map-has-key($breakpoints, $size) {
    $value: map-get($breakpoints, $size);
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @warn 'Unknown `#{$size}` in $breakpoints.';
  }
}

@mixin breakpoint-down($size) {
  @if map-has-key($breakpoints-down, $size) {
    $value: map-get($breakpoints-down, $size);
    @media (max-width: $value) {
      @content;
    }
  } @else {
    @warn 'Unknown `#{$size}` in $breakpoints-down.';
  }
}

@mixin breakpoint($size) {
  @if (map-has-key($breakpoints, $size) and map-has-key($breakpoints-down, $size)) {
    $value1: map-get($breakpoints, $size);
    $value2: map-get($breakpoints-down, $size);
    @if $size == xs {
      @media (max-width: $value2) {
        @content;
      }
    } @else if $size == xl {
      @media (min-width: $value1) {
        @content;
      }
    } @else {
      @media (min-width: $value1) and (max-width: $value2) {
        @content;
      }
    }
  }
}
